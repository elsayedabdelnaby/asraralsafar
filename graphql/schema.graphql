"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"An Email"
scalar Email @scalar(class: "MLL\\GraphQLScalars\\Email")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    languages: [Language!]! @all(scopes: ["active"])

    "Return the current user data"
    me: User! @guard @auth
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String

    "Unique email address."
    email: Email

    "Phone number."
    phone_number: String

    "Avatar"
    avatar_id: Int

    "otp"
    otp: String

    "Newsletter"
    news_letter: Boolean

    "Remember token of the user."
    remember_token: String

    "When the email was verified."
    email_verified_at: DateTime

    "When the phone number was verified."
    phone_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Language {
    "Unique primary key."
    id: ID!

    "name of the language"
    name: String!

    "code of the language"
    code: String!

    "icon of the language"
    icon_url: String!

    "direction of the language"
    direction: String!
}

type Mutation {
    "Customer Registration"
    register(input: RegisterCustomerInput!): User!

    "Log in to a new session and get the user."
    login(
        emailOrPhone: String!
        password: String!
        device_name: String!
    ): LoginResponse!

    verifiyOTP(otp: String!): VerifyResponse!

    "Log out from the current session, showing the user one last time."
    logout: User! @guard

    "Resend the otp"
    resendOTP: OTP!

    "Forget the password"
    forgetPassword(phone_number: String!): ForgetPasswordResponse!

    "verify the forget password otp"
    verifyForgetPasswordOTP(otp: String!): Boolean!

    "update the password of the user"
    updatePassword(password: String!, device_name: String!): LoginResponse!

    "update the customer name"
    updateCustomerNameAndAvater(input: UpdateCustomerNameAndAvater!): User!
        @guard
}

input RegisterCustomerInput @validator {
    email: String
    phone: String!
    password: String!
    device_name: String!
    news_letter: Boolean
}

input UpdateCustomerNameAndAvater @validator {
    name: String!
    avatar_id: Int
}

type LoginResponse {
    status: Boolean
    message: String
    token: String
    otp: String
    is_verified: Boolean
    user: User
}

type OTP {
    otp: String!
}

type VerifyResponse {
    status: Boolean
    message: String
    token: String
    user: User
}

type ForgetPasswordResponse {
    status: Boolean!
    otp: String
    message: String
}

input OrderByInput {
    column: String!
    direction: OrderDirection = ASC
}

enum OrderDirection {
    ASC
    DES
}

#import ../Modules/UsersManagement/GraphQL/*.graphql
#import ../Modules/Website/GraphQL/*.graphql
#import ../Modules/Settings/GraphQL/*.graphql
#import ../Modules/Locations/GraphQL/*.graphql
#import ../Modules/Merchants/GraphQL/*.graphql
#import ../Modules/Operations/GraphQL/*.graphql
